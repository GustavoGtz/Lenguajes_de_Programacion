#lang racket

(struct a-program (exp1) #:transparent)

(struct expression () #:transparent)
(struct const-exp expression (num) #:transparent)
(struct var-exp expression (var) #:transparent)
(struct diff-exp expression (exp1 exp2) #:transparent)
(struct if-exp expression (exp1 exp2 exp3) #:transparent)
(struct zero?-exp expression (exp1) #:transparent)
(struct let-exp expression (var exp1 body) #:transparent)

(define (subst p x y)
  (match p
    [(a-program exp1)
     (subst-exp exp1 x y)]))

(define (subst-exp e x y)
  (match e
    [(const-exp num) (const-exp num)]
    [(var-exp var)
     (if (eq? var x)
         (var-exp y)
         (var-exp var))]
    [(diff-exp exp1 exp2)
     (diff-exp (subst-exp exp1 x y)
               (subst-exp exp2 x y))]
    [(if-exp exp1 exp2 exp3)
     (if-exp (subst-exp exp1 x y)
             (subst-exp exp2 x y)
             (subst-exp exp3 x y))]
    [(zero?-exp exp1) (zero?-exp (subst-exp exp1 x y))]
    [(let-exp var exp1 body)
     (let-exp (if (equal? id x) y id)
     	      (subst-exp exp1 x y)
     	      (subst-exp body x y))]))
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				)

